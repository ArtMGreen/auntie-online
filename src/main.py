import logging
import os

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from src.gpt.base_yandex_gpt import YandexGPTConfig
from src.gpt.yandex_gpt import YandexGPTBot
from src.rag import rag

load_dotenv()

SERVICE_ACCOUNT_ID = os.environ["ACCOUNT_ID"]
KEY_ID = os.environ["KEY_ID"]
PRIVATE_KEY = os.environ["PRIVATE_KEY"]
FOLDER_ID = os.environ["FOLDER_ID"]
TELEGRAM_TOKEN = os.environ["BOT_TOKEN"]

s3_cfg = {
    "endpoint": os.environ["S3_ENDPOINT"],
    "access_key": os.environ["S3_ACCESS_KEY"],
    "secret_key": os.environ["S3_SECRET_KEY"],
    "bucket": os.environ["S3_BUCKET"],
    "prefix": os.environ.get("S3_PREFIX", ""),
}
global_vector_store = rag.prepare_index(s3_cfg)

yandex_bot = YandexGPTBot(
    YandexGPTConfig(SERVICE_ACCOUNT_ID, KEY_ID, PRIVATE_KEY, FOLDER_ID)
)
logger = logging.getLogger(__name__)


async def start(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex GPT.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏\n"
        "/rag XXX - –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç XXX –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Julia –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –Ω–∞ —ç—Ç–æ—Ç –•–•–•"
    )


async def reset_history(update: Update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    yandex_bot.reset_user_history(user_id)
    await update.message.reply_text(
        "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!"
    )


async def show_history_info(update: Update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    history = yandex_bot.get_user_history(user_id)

    if not history:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
    else:
        user_messages = sum(1 for msg in history if msg.role == "user")
        assistant_messages = sum(1 for msg in history if msg.role == "assistant")

        await update.message.reply_text(
            f"üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
            f"–í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {user_messages}\n"
            f"–û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: {assistant_messages}\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"
        )


async def rag_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rag"""
    user_message = " ".join(context.args)

    if not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rag")
        return

    try:
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )

        response = rag.rag_answer(
            global_vector_store, yandex_bot, user_message, update.effective_user.id
        )
        await update.message.reply_text(response)

    except Exception as e:
        logger.error("Error handling /rag command: %s", str(e))
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"

    if not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
        return

    try:
        logger.info(
            "Processing message from %s (ID: %s): %s...",
            username,
            user_id,
            user_message[:50],
        )

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, action="typing"
        )

        response = yandex_bot.ask_gpt(user_message, user_id)
        await update.message.reply_text(response)

    except Exception as e:
        logger.error("Error handling message from %s: %s", username, str(e))
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Update %s caused error %s", update, context.error)
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        yandex_bot.get_iam_token()
        logger.info("IAM token test successful")

        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("reset", reset_history))
        application.add_handler(CommandHandler("history", show_history_info))
        application.add_handler(CommandHandler("rag", rag_command))

        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )

        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()

    except Exception as e:
        logger.error("Failed to start bot: %s", str(e))


if __name__ == "__main__":
    main()
